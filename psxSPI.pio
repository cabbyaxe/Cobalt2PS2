;	Author:	Daniele Giuliani
;	Interfaces with the modified SPI protocol used by
;	PSX to communicate with controller/memory cards


/**
 * The following pins are defined:
 * - PIN_DAT: Data pin (Pin 5)
 * - PIN_CMD: Command pin (Pin 6)
 * - PIN_SEL: Select pin (Pin 7)
 * - PIN_CLK: Clock pin (Pin 8)
 * - PIN_ACK: Acknowledge pin (Pin 9)
 */
.define PUBLIC PIN_DAT 5
.define PUBLIC PIN_CMD 6
.define PUBLIC PIN_SEL 7
.define PUBLIC PIN_CLK 8
.define PUBLIC PIN_ACK 9

.program cmd_reader
; Input pins mapping:
;	0 - CMD
; Program description:
;	Samples CMD line during rising clock edges,
;	waits for SEL low signal before starting execution
sel_high:
wait 0 gpio PIN_SEL		; wait for SEL to go low
set x, 7				; set the bit counter
.wrap_target
wait 0 gpio PIN_CLK		; wait for clock to fall
wait 1 gpio PIN_CLK		; wait for rising clock edge
in pins 1				; sample 1 bit from CMD line
.wrap

.program dat_reader
; Input pins mapping:
;	0 - DAT
; Program description:
;	Samples DAT line during rising clock edges,
;	waits for SEL pin to be low before starting execution.
;	Can be used for sniffing DAT line used by other hardware.
sel_high:
wait 0 gpio PIN_SEL	; wait for SEL to go low
.wrap_target
wait 0 gpio PIN_CLK	; wait for clock to fall
wait 1 gpio PIN_CLK	; wait for rising clock edge
in pins 1		    ; sample 1 bit form DAT line
.wrap

.program dat_writer
.side_set 1 pindirs
; Set pins mapping:
;	0 - DAT
; Output pins mapping:
;	0 - DAT
; Sideset pins mapping:
;	0 - ACK
; Program description:
;	Asserts ACK (signaling that the memory card must send something)
;	and outputs bits to the DAT line on falling clock edges.
;	waits for SEL low signal before starting execution.
;	Bits are outputted by changing pin direction:
;	0 -> set pin as input (Hi-Z) -> output a one
;	1 -> set pin as output low -> output a zero
set pindirs, 0			side 0	; release DAT line (set pin as input = Hi-Z)
wait 0 gpio PIN_SEL		side 0	; wait for SEL to go low
.wrap_target
pull					side 0	; manual pull in order to stall SM if TX fifo is empty
nop						side 1 [5]		; start ACK
set x, 7				side 0 [5]		; stop ACK delay and set bit counter
sendbit:
wait 1 gpio PIN_CLK		side 0			; stop ACK and check clock is high (sideset completes even if instruction stalls)
wait 0 gpio PIN_CLK		side 0			; wait for falling clock edge
out pindirs 1			side 0			; output 1 bit
jmp x-- sendbit			side 0			; count and send 8 bits
.wrap

% c-sdk {
#define SLOW_CLKDIV 50

/**
 * @brief Initialize the command reader program on the specified PIO and state machine.
 *
 * This function configures the specified PIO state machine (SM) to read commands
 * from the specified pins. It sets up the pin directions, FIFO configuration, and
 * clock divider for the state machine.
 *
 * @param pio The PIO instance to configure.
 * @param sm The state machine index within the PIO instance.
 * @param offset The offset of the program in the PIO instruction memory.
 */
static inline void cmd_reader_program_init(PIO pio, uint sm, uint offset) {
	pio_sm_config c = cmd_reader_program_get_default_config(offset);

	/* Pin Configuration */
	sm_config_set_in_pins(&c, PIN_CMD);

	pio_sm_set_consecutive_pindirs(pio, sm, PIN_CMD, 1, false);
	pio_sm_set_consecutive_pindirs(pio, sm, PIN_SEL, 1, false);
	pio_sm_set_consecutive_pindirs(pio, sm, PIN_CLK, 1, false);

	/* Fifo Configuration */
	sm_config_set_in_shift(&c, true, true, 8);		// shift ISR to right, autopush every 8 bits
	sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);	// join RX FIFO

	/* Clock configuration */
    sm_config_set_clkdiv_int_frac(&c, SLOW_CLKDIV, 0x00);

	/* Initialize SM */
	pio_sm_init(pio, sm, offset, &c);
}

/**
 * @brief Initialize the state machine for the data reader program.
 *
 * This function configures and initializes a PIO state machine to read data
 * from a specified pin. It sets up the pin directions, FIFO configuration,
 * and clock settings.
 *
 * @param pio The PIO instance to use.
 * @param sm The state machine index within the PIO instance.
 * @param offset The offset of the program in the PIO instruction memory.
 *
 * Pin Configuration:
 * - Sets the input pin for data reading.
 * - Configures the direction of the data, select, and clock pins.
 *
 * FIFO Configuration:
 * - Configures the input shift register to shift to the right and autopush
 *   every 8 bits.
 * - Joins the RX FIFO.
 *
 * Clock Configuration:
 * - Sets the clock divider to a specified value.
 *
 * Initializes the state machine with the configured settings.
 */
static inline void dat_reader_program_init(PIO pio, uint sm, uint offset) {
	pio_sm_config c = dat_reader_program_get_default_config(offset);

	/* Pin Configuration */
	sm_config_set_in_pins(&c, PIN_DAT);

	pio_sm_set_consecutive_pindirs(pio, sm, PIN_DAT, 1, false);
	pio_sm_set_consecutive_pindirs(pio, sm, PIN_SEL, 1, false);
	pio_sm_set_consecutive_pindirs(pio, sm, PIN_CLK, 1, false);

	/* Fifo Configuration */
	sm_config_set_in_shift(&c, true, true, 8);		// shift ISR to right, autopush every 8 bits
	sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);	// join RX FIFO

    /* Clock configuration */
    sm_config_set_clkdiv_int_frac(&c, SLOW_CLKDIV, 0x00);

	/* Initialize SM */
	pio_sm_init(pio, sm, offset, &c);
}

/**
 * @brief Initializes the state machine for the data writer program.
 *
 * This function configures the specified PIO state machine (SM) to handle
 * data writing operations. It sets up the pin configurations, FIFO settings,
 * and clock settings required for the data writer program.
 *
 * @param pio The PIO instance to use.
 * @param sm The state machine index to configure.
 * @param offset The offset of the program in the PIO instruction memory.
 *
 * Pin Configuration:
 * - Configures the DAT pin for open drain (output low but set as input initially).
 * - Configures the ACK pin for open drain (output low but set as input initially).
 * - Sets the base OUT, SET, and SIDESET pins.
 * - Configures the SEL and CLK pins as inputs.
 *
 * FIFO Configuration:
 * - Sets the output shift register (OSR) to shift right and autopull every 8 bits.
 * - Joins the TX FIFO.
 *
 * Clock Configuration:
 * - Sets the clock divider to the specified value.
 *
 * Initializes the state machine with the configured settings.
 */
static inline void dat_writer_program_init(PIO pio, uint sm, uint offset) {
	pio_sm_config c = dat_writer_program_get_default_config(offset);

	/* Pin Configuration */
	sm_config_set_out_pins(&c, PIN_DAT, 1);		// set base OUT pin (DAT)
	sm_config_set_set_pins(&c, PIN_DAT, 1);		// set base SET pin (DAT)
	sm_config_set_sideset_pins(&c, PIN_ACK);	// set base SIDESET pin (ACK)

    /* configure DAT pin for open drain (output low but set as input initially) */
	pio_sm_set_pins_with_mask(pio, sm, 0, 1 << PIN_DAT);
	pio_sm_set_consecutive_pindirs(pio, sm, PIN_DAT, 1, false);
	pio_gpio_init(pio, PIN_DAT);

    /* configure ACK pin for open drain (output low but set as input initially) */
	pio_sm_set_pins_with_mask(pio, sm, 0, 1 << PIN_ACK);
	pio_sm_set_consecutive_pindirs(pio, sm, PIN_ACK, 1, false);
	pio_gpio_init(pio, PIN_ACK);

	pio_sm_set_consecutive_pindirs(pio, sm, PIN_SEL, 1, false);
	pio_sm_set_consecutive_pindirs(pio, sm, PIN_CLK, 1, false);

	/* FIFO Configuration */
	sm_config_set_out_shift(&c, true, true, 8);		// shift OSR to right, autopull every 8 bits
	sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);	// join TX FIFO

    /* Clock configuration */
    sm_config_set_clkdiv_int_frac(&c, SLOW_CLKDIV, 0x00);

	/* Initialize SM */
	pio_sm_init(pio, sm, offset, &c);
}

/**
 * @brief Reads a byte from the PIO state machine in a blocking manner.
 *
 * This function reads a 32-bit value from the specified PIO state machine and
 * extracts the most significant byte (MSB) by shifting the value 24 bits to the right.
 * The function blocks until a value is available to read.
 *
 * @param pio The PIO instance to read from.
 * @param sm The state machine index to read from.
 * @return The most significant byte of the 32-bit value read from the state machine.
 */
static inline uint8_t read_byte_blocking(PIO pio, uint sm) {
	return (uint8_t) (pio_sm_get_blocking(pio, sm) >> 24);
}

/**
 * @brief Writes a byte to the PIO state machine in a blocking manner.
 *
 * This function sends a byte to the specified PIO state machine and waits until
 * the operation is complete. The byte is inverted before being sent, meaning
 * each bit is flipped (0 becomes 1 and 1 becomes 0).
 *
 * @param pio The PIO instance to which the byte will be written.
 * @param sm The state machine within the PIO instance to which the byte will be written.
 * @param byte The byte to be written, which will be inverted before sending.
 */
static inline void write_byte_blocking(PIO pio, uint sm, uint32_t byte) {
	pio_sm_put_blocking(pio, sm, ~byte & 0xFF); // invert bits (0 become 1 setting the output to low)
}
%}